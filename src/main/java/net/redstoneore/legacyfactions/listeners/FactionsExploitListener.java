package net.redstoneore.legacyfactions.listeners;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockFromToEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

import net.redstoneore.legacyfactions.config.Config;
import net.redstoneore.legacyfactions.entity.Board;
import net.redstoneore.legacyfactions.entity.Faction;
import net.redstoneore.legacyfactions.locality.Locality;
import net.redstoneore.legacyfactions.util.LocationUtil;
import net.redstoneore.legacyfactions.util.cross.CrossTeleportCause;

public class FactionsExploitListener implements Listener {
	
	// -------------------------------------------------- //
	// INSTANCE
	// -------------------------------------------------- //

	private static FactionsExploitListener instance = new FactionsExploitListener();
	public static FactionsExploitListener get() { return instance; }
	
	// -------------------------------------------------- //
	// OBSIDIAN GENERATORS
	// -------------------------------------------------- //
	
	@EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
	public void blockObsidianGenerators(BlockFromToEvent event) {
		if (LocationUtil.isFactionsDisableIn(event)) return;
		if (!Config.handleExploitObsidianGenerators) return;
		
		Block block = event.getToBlock();
		Material source = event.getBlock().getType();
		Material target = block.getType();
		if ((target == Material.REDSTONE_WIRE || target == Material.TRIPWIRE) &&(source == Material.AIR || source == Material.LAVA || source == Material.STATIONARY_LAVA)) {
			block.setType(Material.AIR);
		}
	}

	// -------------------------------------------------- //
	// ENDER PEARL CLIPPING
	// -------------------------------------------------- //
	
	@EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
	public void blockEnderPearlTeleport(PlayerTeleportEvent event) {
		if (LocationUtil.isFactionsDisableIn(event)) return;
		if (!Config.handleExploitEnderPearlClipping) return; 
		
		// Ender pearl cause?
		if (CrossTeleportCause.get(event.getCause()) != CrossTeleportCause.ENDER_PEARL) return;

		// this exploit works when the target location is within 0.31 blocks or so of a door or glass block or similar...
		Location factionTo = event.getTo();
		Location factionFrom = event.getFrom();

		// blocks who occupy less than 1 block width or length wise need to be handled differently
		Material mat = event.getTo().getBlock().getType();
		if (((mat == Material.THIN_GLASS || mat == Material.IRON_FENCE) && clippingThrough(factionTo, factionFrom, 0.65)) || ((mat == Material.FENCE || mat == Material.NETHER_FENCE) && clippingThrough(factionTo, factionFrom, 0.45))) {
			event.setTo(factionFrom);
			return;
		}

		// simple fix otherwise: ender pearl target locations are standardised to be in the centre (X/Z) of the target block, not at the edges
		factionTo.setX(factionTo.getBlockX() + 0.5);
		factionTo.setZ(factionTo.getBlockZ() + 0.5);
		event.setTo(factionTo);
	}

	public static boolean clippingThrough(Location target, Location from, double thickness) {
		return ((from.getX() > target.getX() && (from.getX() - target.getX() < thickness)) || (target.getX() > from.getX() && (target.getX() - from.getX() < thickness)) || (from.getZ() > target.getZ() && (from.getZ() - target.getZ() < thickness)) || (target.getZ() > from.getZ() && (target.getZ() - from.getZ() < thickness)));
	}
	
	// -------------------------------------------------- //
	// LIQUID FLOW
	// -------------------------------------------------- //
	
	@EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
	public void onBlockFromTo(BlockFromToEvent event) {
		if (LocationUtil.isFactionsDisableIn(event)) return;
		if (!Config.handleExploitLiquidFlow) return;
		
		// Is it liquid flow?
		if (!event.getBlock().isLiquid()) return;
		
		// Is it able to glow to the next block?
		if (!event.getToBlock().isEmpty())  return;
		
		Faction factionFrom = Board.get().getFactionAt(Locality.of(event.getBlock()));
		Faction factionTo = Board.get().getFactionAt(Locality.of(event.getToBlock()));
		
		// If its the same faction we don't have to check.
		if (factionFrom == factionTo) return;
		
		// If going into wilderness, we don't care
		if (!factionTo.isWilderness()) return;
		
		if (factionFrom.isNormal() && factionFrom.getRelationTo(factionFrom).isAlly()) {
			return;
		}
		
		event.setCancelled(true);
	}
	
}
